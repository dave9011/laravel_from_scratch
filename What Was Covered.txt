Lesson 8: Defining Relationships with Eloquent ------------------------------------------------------

Suppose we have a 'Post' and 'Note' class and we want to have a relationship between the notes
of a particular post and vice versa.

So we made our migration to create our notes table. Once the migration is ran, then we can go
ahead and create our model, Note. (if we run the command "php artisan make:model Note -m" then the
"-m" option tells artisan to run the migration beforehand.

These are NOT the same.
	1. $card->notes->first(): selects all notes and THEN it picks the first one
	2. $card->notes()->first(): limits the initial query to one

The importance is that the first one (no. 1) will first fetch every entry (so if we have 500 notes
then it will retrieve 500 notes) and then select the first entry.  

We can use "DB::listen( function($query) { var_dump( $query->sql ); } );" to have the query that is 
ran when we execute a command. In this way, we can observe how the above two commands are different.

Eloquent will "cache" relationships as part of the object after the first time we run the query.

We can hard code the card_id into out Note object before we save it using "$note->card_id=[enter a
card_id here]" or we can use an existing reference to a Card and save our Note as part of it using: 
"$card->notes()->save($note)"

We learned that we can also use this command to create and insert a new instance of Note:
	"$card->notes()->create(['body'=>'a body message goes here']);

*If you run this above command you will get a "MassAssignmentException", which is how Laravel protects
you against potential attacks. If this was not in place then the user could potentially modify a
field of an object that they shouldn't have access to. To get around this we have to explicitly say 
what we are allowing to be modified, so in this case we go into Card.php and add 
"protected $fillable = ['body'];"


Lesson 9: Forms -------------------------------------------------------------------------------------

- Had to modify the Http/Kernel.php file in order to avoid getting a tokenmismatchexception when 
making the 'POST' request

*Feature alert!!! (route binding)
- In our notes controller, we needed a way to get the card we are at. So, remember that in our
routes file we had a line like "Route::post('cards/{card}/notes', 'NotesController@store');".
Notice that here we pass the card (i.e. {card}). Because Laravel uses route binding, we can add 
"Card $card" to our parameters in NotesController and it will pass in the card we are at.

Notice one of the ways that we can store our Note is using the statement 
"$card->notes()->create($request->all());". This is a valid argument to pass in because it returns
an array of all the values in the request. Wouldn't that be a problem because don't we have no control
over what is passed in? Nope, because we already established in our Model what fields are 'fillable'.

We have many ways that we can add a Note to a Card. However, my preferred way would be the final method.
Using this method we are more clear about the connection between a Card and a Note. This is in accord
with the Principle Of Least Astonishment.

Lesson 10: Updating Records and Eager Loading -------------------------------------------------------

Because there is not much browser support for requests beyond GET and POST, we have to "fake" these
by using the line "{{ method_field('PATCH') }}" in our edit.blade.php form. When we submit that form
Laravel will check did the form have the "_method" name and when it does it will realize that the user
wanted a custom request type so it will read it. In our case, we use a custom request called 'PATCH'
and it will route that accordingly. We do the same for 'DELETE'.

We want to eager load all records that we are going to need, so that we avoid running too many queries
in a for each loop. This is an "n+1" problem.

We don't want to go too far in URI nesting for our requests. For example, in this lesson we chose 
to use 'notes/{note}/edit' rather than something like 'cards/{card}/notes/{note}/edit'
