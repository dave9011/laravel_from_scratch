Lesson 8: Defining Relationships with Eloquent ------------------------------------------------------

Suppose we have a 'Post' and 'Note' class and we want to have a relationship between the notes
of a particular post and vice versa.

So we made our migration to create our notes table. Once the migration is ran, then we can go
ahead and create our model, Note. (if we run the command "php artisan make:model Note -m" then the
"-m" option tells artisan to run the migration beforehand.

These are NOT the same.
	1. $card->notes->first(): selects all notes and THEN it picks the first one
	2. $card->notes()->first(): limits the initial query to one

The importance is that the first one (no. 1) will first fetch every entry (so if we have 500 notes
then it will retrieve 500 notes) and then select the first entry.  

We can use "DB::listen( function($query) { var_dump( $query->sql ); } );" to have the query that is 
ran when we execute a command. In this way, we can observe how the above two commands are different.

Eloquent will "cache" relationships as part of the object after the first time we run the query.

We can hard code the card_id into out Note object before we save it using "$note->card_id=[enter a
card_id here]" or we can use an existing reference to a Card and save our Note as part of it using: 
"$card->notes()->save($note)"

We learned that we can also use this command to create and insert a new instance of Note:
	"$card->notes()->create(['body'=>'a body message goes here']);

*If you run this above command you will get a "MassAssignmentException", which is how Laravel protects
you against potential attacks. If this was not in place then the user could potentially modify a
field of an object that they shouldn't have access to. To get around this we have to explicitly say 
what we are allowing to be modified, so in this case we go into Card.php and add 
"protected $fillable = ['body'];"


Lesson 9: Forms -------------------------------------------------------------------------------------

- Had to modify the Http/Kernel.php file in order to avoid getting a tokenmismatchexception when 
making the 'POST' request

*Feature alert!!! (route binding)
- In our notes controller, we needed a way to get the card we are at. So, remember that in our
routes file we had a line like "Route::post('cards/{card}/notes', 'NotesController@store');".
Notice that here we pass the card (i.e. {card}). Because Laravel uses route binding, we can add 
"Card $card" to our parameters in NotesController and it will pass in the card we are at.

Notice one of the ways that we can store our Note is using the statement 
"$card->notes()->create($request->all());". This is a valid argument to pass in because it returns
an array of all the values in the request. Wouldn't that be a problem because don't we have no control
over what is passed in? Nope, because we already established in our Model what fields are 'fillable'.

We have many ways that we can add a Note to a Card. However, my preferred way would be the final method.
Using this method we are more clear about the connection between a Card and a Note. This is in accord
with the Principle Of Least Astonishment.


Lesson 10: Updating Records and Eager Loading -------------------------------------------------------

- Because there is not much browser support for requests beyond GET and POST, we have to "fake" these
by using the line "{{ method_field('PATCH') }}" in our edit.blade.php form. When we submit that form
Laravel will check did the form have the "_method" name and when it does it will realize that the user
wanted a custom request type so it will read it. In our case, we use a custom request called 'PATCH'
and it will route that accordingly. We do the same for 'DELETE'.

- We want to eager load all records that we are going to need, so that we avoid running too many queries
in a for each loop. This is an "n+1" problem.

- We don't want to go too far in URI nesting for our requests. For example, in this lesson we chose 
to use 'notes/{note}/edit' rather than something like 'cards/{card}/notes/{note}/edit'


Lesson 11: Validation and More ----------------------------------------------------------------------

- We don't want to use a hidden input in our HTML to pass in our data (in this case our user_id when 
creating a note). This is because someone could actually modify the page source code and change the
value that we use in the hidden input; therefore potentially adding whatever they want.

-If we look at Controller.php, which all our controllers extend from, we see that it has a trait called
"ValidatesRequests". We can see in that file that we have a method validate() which we can use.

- Pay attention to this line "<textarea name="body" class="form-control">{{ old('body') }}</textarea>"
 Notice how in the body of the textarea element we are echoing the contents of old('body'). What's
happening here is that in our validation we do a redirect back to the previous page and we also
pass in the old input. Therefore, if we have a field, we can simply get the value from the page before
the redirect by using the old() method and giving it the name of the field. In this case, we have a
field with the name 'body' so we can use old('body') to get its old content. If the field had a name
'username' then we would call old('username').


Lesson 12: Your Questions Answered -----------------------------------------------------------------

- This lesson is actually a Q&A for Jeffrey, the series teacher. It has plenty of great questions
in the comments that I suggest reading (https://laracasts.com/series/laravel-5-from-scratch/episodes/12).

- I'm keeping this answer for the first question, which was one I had as well. It's a suggested
workflow when starting on a project.

	1. Decide the first feature/page I want to write.
	2. Create a route, and direct the endpoint to a controller.
	3. Create the controller, add the method, load an appropriate view.
	4. Create the view, add some dummy text.
	5. Load page in the browser to ensure it's all working.
	6. Flesh out HTML.
	7. Write CSS in app.scss file, while running gulp watch
	8. Import "public/css/app.css" in the head tag of my view master page.
	9. Rinse and repeat.


Lesson 13: Authenticate Your Users -----------------------------------------------------------------

- This lesson is covered in a different project, skip this one for the current one as it would
complicate what we already have.

- Important note: We want to implement authentication by using "php artisan make:auth" which will
handle most of the underlying work for us. We also want to run this at THE BEGINNING OF OUR PROJECT.


Lesson 14: Understanding Middleware ----------------------------------------------------------------

- Think of your application as an onion. So when your request comes in we have to go through the 
different layers of the onion to get to the core. "Middleware" would be those layers that you have to
go through.

- Each "Middleware" class has a handle() method that is responsible for processing the request in 
some way and passing it on to the next level of our onion analogy.

- The line below is a global middleware in our application. We can use "php artisan down" to put our
application in a maintenance mode that will also let users know that we are in  a maintenace mode. We
can use "php artisan up" to get it back up again. This is made easier by this middleware:

	protected $middleware = [
        	\Illuminate\Foundation\Http\Middleware\CheckForMaintenanceMode::class,
    	];


Lesson 14: Flashing to the Session -----------------------------------------------------------------

- We add a route for 'begin' from where we will pass a flash and then redirect to wherever we want. 
That destination that we redirect to will have the flash message a SINGLE time, which is our desired
behavior.

- We also substituted our method for adding flash messages for a global helper function that we placed
in our newly created helpers.php file. Once we create this and add our function there we can autoload
it by adding it to the files that we autoload (to do this we modified our composer.json file). Once we
modify this we can run the command composer dump-autoload' to make sure the change is reflected. From 
there on we can simply call flash() from anywhere.

  
